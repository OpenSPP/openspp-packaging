name: Build Packages

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: false
        type: string
      modules_ref:
        description: 'Branch/tag of openspp-modules to use'
        required: false
        default: '17.0'
        type: string
    outputs:
      version:
        description: 'Version that was built'
        value: ${{ jobs.prepare.outputs.version }}

jobs:
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      timestamp: ${{ steps.version.outputs.timestamp }}
    steps:
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Extract version from release.py
            VERSION=$(python3 -c "exec(open('openspp/release.py').read()); print(version)")
            # For weekly builds, append date
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              VERSION="${VERSION}.$(date +%Y%m%d)"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Update version in release.py
        run: |
          sed -i "s/version = .*/version = '${{ steps.version.outputs.version }}'/" openspp/release.py
      
      - name: Upload updated release.py
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: openspp/release.py

  fetch-modules:
    name: Fetch OpenSPP Modules
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Download release info
        uses: actions/download-artifact@v4
        with:
          name: release-info
          path: openspp/
      
      - name: Checkout openspp-modules
        uses: actions/checkout@v4
        with:
          repository: OpenSPP/openspp-modules
          ref: ${{ inputs.modules_ref }}
          path: openspp-modules
      
      - name: Copy modules to package
        run: |
          # Copy all module directories (excluding hidden and setup directories)
          for dir in openspp-modules/*/; do
            if [[ -d "$dir" && ! $(basename "$dir") =~ ^\. && $(basename "$dir") != "setup" ]]; then
              if [[ -f "$dir/__manifest__.py" || -f "$dir/__openerp__.py" ]]; then
                echo "Copying module: $(basename $dir)"
                cp -r "$dir" openspp/addons/
              fi
            fi
          done
          
          # List copied modules
          echo "Modules copied:"
          ls -la openspp/addons/
      
      - name: Create package archive
        run: |
          tar czf openspp-modules-${{ needs.prepare.outputs.version }}.tar.gz openspp/
      
      - name: Upload modules artifact
        uses: actions/upload-artifact@v4
        with:
          name: openspp-modules
          path: openspp-modules-*.tar.gz

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [prepare, fetch-modules]
    steps:
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Download modules
        uses: actions/download-artifact@v4
        with:
          name: openspp-modules
      
      - name: Extract modules
        run: |
          tar xzf openspp-modules-*.tar.gz
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
      
      - name: Build package
        run: |
          python -m build
      
      - name: Upload Python packages
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/*

  build-deb:
    name: Build Debian Package
    runs-on: ubuntu-latest
    needs: [prepare, fetch-modules]
    steps:
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Download modules
        uses: actions/download-artifact@v4
        with:
          name: openspp-modules
      
      - name: Extract modules
        run: |
          tar xzf openspp-modules-*.tar.gz
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper dh-python python3-all python3-setuptools
      
      - name: Update changelog
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          DATE=$(date -R)
          sed -i "s/VERSION/$VERSION/g" setup/debian/changelog
          sed -i "s/TIMESTAMP/$DATE/g" setup/debian/changelog
      
      - name: Build DEB package
        run: |
          # Create package directory
          PKG_DIR="openspp-${{ needs.prepare.outputs.version }}"
          mkdir -p "../$PKG_DIR"
          cp -r . "../$PKG_DIR"
          cd "../$PKG_DIR"
          
          # Copy debian files to root
          cp -r setup/debian debian/
          
          # Build package
          dpkg-buildpackage -us -uc -b
          
          # Move built package
          cd ..
          mkdir -p packages
          mv *.deb packages/
      
      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: packages/*.deb

  build-rpm:
    name: Build RPM Package
    runs-on: ubuntu-latest
    needs: [prepare, fetch-modules]
    container:
      image: rockylinux:9
    steps:
      - name: Install dependencies
        run: |
          dnf install -y rpm-build python3-devel git tar gzip
      
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Download modules
        uses: actions/download-artifact@v4
        with:
          name: openspp-modules
      
      - name: Extract modules
        run: |
          tar xzf openspp-modules-*.tar.gz
      
      - name: Prepare RPM build
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Create rpmbuild structure
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Create source tarball
          tar czf ~/rpmbuild/SOURCES/openspp-${VERSION}.tar.gz \
            --transform "s,^,openspp-${VERSION}/," \
            --exclude='.git' --exclude='*.pyc' .
          
          # Copy spec file
          cp setup/rpm/openspp.spec ~/rpmbuild/SPECS/
      
      - name: Build RPM
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          rpmbuild -ba --define "version ${VERSION}" ~/rpmbuild/SPECS/openspp.spec
      
      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package
          path: ~/rpmbuild/RPMS/noarch/*.rpm

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [prepare, fetch-modules]
    steps:
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Download modules
        uses: actions/download-artifact@v4
        with:
          name: openspp-modules
      
      - name: Extract modules
        run: |
          tar xzf openspp-modules-*.tar.gz
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: setup/docker/Dockerfile
          platforms: linux/amd64
          tags: |
            openspp/openspp:${{ needs.prepare.outputs.version }}
            openspp/openspp:17.0
            openspp/openspp:latest
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
          outputs: type=docker,dest=openspp-docker-${{ needs.prepare.outputs.version }}.tar
      
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: openspp-docker-*.tar

  build-windows:
    name: Build Windows Installer
    runs-on: ubuntu-latest
    needs: [prepare, fetch-modules]
    steps:
      - name: Checkout packaging repo
        uses: actions/checkout@v4
      
      - name: Download modules
        uses: actions/download-artifact@v4
        with:
          name: openspp-modules
      
      - name: Extract modules
        run: |
          tar xzf openspp-modules-*.tar.gz
      
      - name: Install Wine and dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32 wine64 winbind wget
      
      - name: Setup Wine environment
        run: |
          # Initialize Wine
          export WINEARCH=win64
          export WINEPREFIX=$HOME/.wine
          wineboot -u
          
          # Download and install NSIS
          NSIS_VERSION="3.09"
          wget -q -O /tmp/nsis.exe \
            "https://downloads.sourceforge.net/project/nsis/NSIS%203/${NSIS_VERSION}/nsis-${NSIS_VERSION}-setup.exe"
          
          # Install NSIS silently
          wine /tmp/nsis.exe /S
          
          # Wait for installation
          sleep 10
          
          # Verify installation
          wine "$HOME/.wine/drive_c/Program Files (x86)/NSIS/makensis.exe" /VERSION || \
          wine "$HOME/.wine/drive_c/Program Files/NSIS/makensis.exe" /VERSION
      
      - name: Build installer with Wine
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Update version in NSIS script
          sed -i "s/{{VERSION}}/$VERSION/g" setup/windows/openspp.nsi
          
          # Build with NSIS in Wine
          export WINEPREFIX=$HOME/.wine
          
          # Try both possible NSIS locations
          if [ -f "$HOME/.wine/drive_c/Program Files (x86)/NSIS/makensis.exe" ]; then
            wine "$HOME/.wine/drive_c/Program Files (x86)/NSIS/makensis.exe" setup/windows/openspp.nsi
          else
            wine "$HOME/.wine/drive_c/Program Files/NSIS/makensis.exe" setup/windows/openspp.nsi
          fi
          
          # Ensure dist directory exists
          mkdir -p dist
          
          # Move installer to dist
          mv setup/windows/*.exe dist/ || true
      
      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/*.exe