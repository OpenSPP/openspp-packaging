name: Publish Packages

on:
  workflow_call:
    inputs:
      version:
        description: 'Version being published'
        required: true
        type: string
      publish_pypi:
        description: 'Publish to PyPI'
        default: true
        type: boolean
      publish_docker:
        description: 'Publish to Docker Hub'
        default: true
        type: boolean
      publish_github:
        description: 'Create GitHub Release'
        default: true
        type: boolean
    secrets:
      PYPI_API_TOKEN:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false

jobs:
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: inputs.publish_pypi
    steps:
      - name: Download Python packages
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
      
      - name: Check package
        run: |
          twine check dist/*
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "üì¶ Publishing to PyPI..."
          echo "Note: PyPI publishing is currently disabled by default."
          echo "To enable, set publish_pypi: true in the workflow call."
          
          if [ -n "$TWINE_PASSWORD" ]; then
            twine upload dist/*
            echo "‚úÖ Published to PyPI"
          else
            echo "‚ö†Ô∏è  PyPI token not configured or publishing disabled"
            echo "This is expected if PyPI publishing is intentionally disabled."
          fi

  publish-docker:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    if: inputs.publish_docker
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: |
          docker load -i openspp-docker-*.tar
      
      - name: Log in to Docker Hub
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker images
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        run: |
          echo "üê≥ Publishing to Docker Hub..."
          echo "Note: Docker Hub publishing is currently disabled by default."
          echo "To enable, set publish_docker: true in the workflow call."
          
          docker push openspp/openspp:${{ inputs.version }}
          docker push openspp/openspp:17.0
          docker push openspp/openspp:latest
          echo "‚úÖ Published to Docker Hub"
      
      - name: Skip Docker Hub
        if: ${{ secrets.DOCKER_USERNAME == '' || secrets.DOCKER_PASSWORD == '' }}
        run: |
          echo "‚ö†Ô∏è  Docker Hub credentials not configured or publishing disabled"
          echo "This is expected if Docker Hub publishing is intentionally disabled."

  publish-github:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: inputs.publish_github
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy Python packages
          if [ -d "artifacts/python-packages" ]; then
            cp artifacts/python-packages/* release-assets/
          fi
          
          # Copy DEB package
          if [ -d "artifacts/deb-package" ]; then
            cp artifacts/deb-package/*.deb release-assets/
          fi
          
          # Copy RPM package
          if [ -d "artifacts/rpm-package" ]; then
            cp artifacts/rpm-package/*.rpm release-assets/
          fi
          
          # Copy Windows installer
          if [ -d "artifacts/windows-installer" ]; then
            cp artifacts/windows-installer/*.exe release-assets/
          fi
          
          # List assets
          echo "Release assets:"
          ls -la release-assets/
      
      - name: Generate release notes
        run: |
          cat << EOF > release-notes.md
          # OpenSPP ${{ inputs.version }}
          
          ## üì¶ Installation
          
          ### Python (pip)
          \`\`\`bash
          pip install openspp==${{ inputs.version }}
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull openspp/openspp:${{ inputs.version }}
          \`\`\`
          
          ### Linux (DEB/RPM)
          Download the appropriate package from the assets below.
          
          ### Windows
          Download and run the installer from the assets below.
          
          ## üìã What's Changed
          
          This release includes the latest updates from [openspp-modules](https://github.com/OpenSPP/openspp-modules).
          
          ## üìö Documentation
          
          - [Installation Guide](https://docs.openspp.org/installation)
          - [Configuration Guide](https://docs.openspp.org/configuration)
          - [Module Documentation](https://docs.openspp.org/modules)
          
          ## üêõ Bug Reports
          
          Please report issues at: https://github.com/OpenSPP/openspp-modules/issues
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}
          name: OpenSPP ${{ inputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: release-assets/*
          fail_on_unmatched_files: false
      
      - name: Summary
        run: |
          echo "‚úÖ GitHub Release created: v${{ inputs.version }}"
          echo "View at: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}"