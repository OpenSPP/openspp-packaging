name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  python-safety-check:
    name: Python Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: Run safety check on requirements
        run: |
          safety check -r requirements.txt --json --output safety-report.json
        continue-on-error: true
      
      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json
      
      - name: Parse and display vulnerabilities
        if: always()
        run: |
          python -c "
          import json
          import sys
          
          try:
              with open('safety-report.json', 'r') as f:
                  report = json.load(f)
              
              if report.get('vulnerabilities'):
                  print('‚ö†Ô∏è SECURITY VULNERABILITIES FOUND:')
                  print('=' * 60)
                  for vuln in report['vulnerabilities']:
                      print(f\"Package: {vuln.get('package', 'Unknown')} {vuln.get('installed_version', '')}\"
                      print(f\"Vulnerability: {vuln.get('vulnerability', 'Unknown')}\"
                      print(f\"Affected versions: {vuln.get('affected_versions', 'Unknown')}\"
                      print(f\"Description: {vuln.get('description', 'No description')}\"
                      print('-' * 60)
                  sys.exit(1)
              else:
                  print('‚úÖ No known vulnerabilities found in Python dependencies')
          except Exception as e:
              print(f'Error parsing safety report: {e}')
          "

  pip-audit:
    name: Pip Audit Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      
      - name: Run pip-audit
        run: |
          pip-audit -r requirements.txt --desc --format json --output pip-audit-report.json
        continue-on-error: true
      
      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-report
          path: pip-audit-report.json
      
      - name: Display pip-audit results
        if: always()
        run: |
          pip-audit -r requirements.txt --desc

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-2.0, GPL-3.0  # Deny incompatible licenses
          
  git-repos-scan:
    name: Scan Vendored Git Repositories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML gitpython
      
      - name: Check git dependencies for security issues
        run: |
          python -c "
          import yaml
          import subprocess
          import sys
          
          # Load dependencies
          with open('dependencies.yaml', 'r') as f:
              deps = yaml.safe_load(f)
          
          issues_found = False
          
          # Check Odoo
          if 'odoo' in deps:
              print(f\"Checking Odoo: {deps['odoo']['url']} @ {deps['odoo']['ref']}\")
          
          # Check all addon repositories
          for name, config in deps.get('addons', {}).items():
              url = config['url']
              ref = config['ref']
              print(f\"Checking {name}: {url} @ {ref}\")
              
              # Check if using non-standard branches that might not receive security updates
              if 'develop' in ref or 'openspp' in ref:
                  print(f\"  ‚ö†Ô∏è  WARNING: Using non-standard branch '{ref}' - ensure security updates are tracked\")
                  issues_found = True
          
          if issues_found:
              print(\"\\n‚ö†Ô∏è  Some repositories use non-standard branches. Ensure you're tracking security updates.\")
              sys.exit(0)  # Warning only, don't fail the build
          else:
              print(\"\\n‚úÖ All git dependencies look good\")
          "

  create-issue-on-vulnerability:
    name: Create Issue for Vulnerabilities
    runs-on: ubuntu-latest
    needs: [python-safety-check, pip-audit, trivy-scan]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Create issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üîí Security Vulnerabilities Detected';
            const body = `Security scanning has detected vulnerabilities in the project dependencies.
            
            **Workflow Run**: [View Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Date**: ${new Date().toISOString()}
            
            Please review the security scan results and update the affected dependencies.
            
            ### Actions Required:
            1. Review the vulnerability reports in the workflow artifacts
            2. Update affected dependencies to secure versions
            3. Test the updates thoroughly
            4. Create a PR with the fixes
            
            cc: @security-team`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'dependencies', 'high-priority']
            });